% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rrevaluate.r
\name{make_hsc}
\alias{make_hsc}
\title{Continuous Habitat Suitability Function Generator}
\usage{
make_hsc(value, score, scoreleft = 0, scoreright = 0, spline.expand = 1L,
  ...)
}
\arguments{
\item{value}{Vector of parameter values, or a dataframe containing 
parameters values in the first column and scores in the second column. 
\code{value} must be in ascending order.}

\item{score}{Vector of scores assigned to parameter values specified in 
\code{values}.}

\item{scoreleft}{the value to be returned when input values are less than 
\code{min(value)}.}

\item{scoreright}{the value to be returned when input values are greater 
than \code{max(value)}.}

\item{spline.expand}{Add curvature to the habitat suitability curve by 
expanding the resolution of \code{(value, score)} and fitting a spline 
using \code{spline()}. If \code{spline.expand = 1}, the habitat 
suitability curve is generated as a linear interpolation between 
\code{(value, score)} pairs. For integer values of 
\code{spline.expand > 1}, the lengths of \code{value} and \code{score} are
increased to \code{spline.expand*length(value)}.}

\item{...}{Additional arguments passed to \code{spline()}.}
}
\value{
A function representing the habitat suitability curve
}
\description{
Generate a continuous habitat suitability function given parameter values 
and scores.
}
\details{
When \code{spline.expand > 1}, an interpolating spline is first
  fit to the data. In order to ensure that no scores exceed the maximum 
  score included in \code{score}, two separate splines are fit to data below
  and above the maximum value of \code{score}. The interpolated data are 
  then approximated again using a linear interpolation to enforce the 
  extrapolation rules specified by \code{scoreleft} and \code{scoreright}.
}
\examples{
make_hsc(c(5, 10, 15, 20, 25), c(0, 0.7, 1, 0.75, 0), spline.expand = 1)
make_hsc(c(5, 10, 15, 20, 25), c(0, 0.7, 1, 0.75, 0), spline.expand = 100)

make_hsc(c(5, 10, 15), c(0, 0.7, 1), scoreright = 1, spline.expand = 1)
make_hsc(c(5, 10, 15), c(0, 0.7, 1), scoreright = 1, spline.expand = 100)

}

